# //表示整除 **表示幂
print(9 // 2)  # 4
print(9 ** 2)  # 81
# type()查看自变量类型
# int() str() float()强制类型转换
'''解释性语言和编译性语言是两种不同的程序设计语言翻译方式，它们在处理方式和执行效率等方面有明显的差异，同时也各自具有一些优势和劣势。

一、区别

处理方式：编译性语言在程序运行之前，通过编译器将源代码一次性翻译成目标代码（通常是机器语言），然后直接运行目标代码。而解释性语言则是在程序运行时，通过解释器逐行翻译并执行源代码。
执行效率：由于编译性语言将源代码一次性翻译成目标代码，所以其执行速度通常比解释性语言快。而解释性语言由于需要逐行翻译并执行，所以其执行速度相对较慢。
二、优劣

编译性语言的优势：

执行速度快：由于目标代码是直接运行在硬件上的机器语言，所以其执行速度非常快。
代码优化：编译器可以对源代码进行优化，以提高目标代码的执行效率。
安全性较高：编译后的目标代码通常难以被反编译，从而保护了源代码的安全性。
编译性语言的劣势：

平台依赖性：编译后的目标代码通常是针对特定平台（如操作系统、CPU架构等）生成的，因此不具备跨平台性。
调试困难：由于目标代码是机器语言，所以在出现错误时，调试起来相对困难。
解释性语言的优势：

跨平台性：解释性语言通常可以在不同的平台上运行，只要该平台安装了相应的解释器即可。
易于调试：由于源代码是直接被解释器执行的，所以在出现错误时，可以更容易地定位并修复错误。
动态性：解释性语言可以在运行时动态地改变程序的行为，这使得它们在某些场景下更加灵活。
解释性语言的劣势：

执行速度慢：由于需要逐行翻译并执行源代码，所以其执行速度相对较慢。
安全性较低：解释性语言的源代码通常是明文保存的，因此容易被查看和修改，从而降低了其安全性。
综上所述，编译性语言和解释性语言各有其优势和劣势，选择哪种语言取决于具体的应用场景和需求。例如，对于需要高性能和安全性的系统级应用，编译性语言可能更合适；而对于需要跨平台和动态性的Web应用或脚本任务，解释性语言可能更合适。'''
